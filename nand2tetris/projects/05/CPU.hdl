// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // instruction[15] is op-code
    // = 0 -> A instruction
    // = 1 -> C instruction 

    // instruction[12] is A/M selection (A==1)

    // instruction[6..11] are c-values

    // instruction[3..5] are destination bits
    // instruction[3] = M
    // instruction[4] = D
    // instruction[5] = A

    Not(in=instruction[15], out=ni);
    Mux16(a=ALUout, b=instruction, sel=ni, out=toARegister);

    // A register only gets 0..14 of the instruction
    Or(a=ni, b=instruction[5], out=loadA);
    ARegister(in=toARegister, load=loadA, out=ARegisterOut, out[0..14]=addressM); // A
   
    // writeM
    And(a=instruction[15],b=instruction[3],out=writeM);
   
    // A or M
    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=ARegisterOut, b=inM, sel=AorM, out=toALUy);

    And(a=instruction[15], b=instruction[4], out=loadD); // C-instruction and D destination bit
    DRegister(in=ALUout, load=loadD, out=toALUx);  // D register

    ALU(x=toALUx, y=toALUy, zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng); 

    // instruction[0..2] are jump bits
    // 000 no jump
    // 111 unconditional goto
    // else conditional goto
    // take outputs from ALU and feed to PC, jump to address or increment PC accordingly
    And(a=zr, b=instruction[1], out=jeq); // output is zero and jeq
    And(a=ng, b=instruction[2], out=jlt); // output is negative and jlt
    Or(a=zr, b=ng, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jint);
    Or(a=jint, b=jgt, out=jumpToA);
    And(a=instruction[15], b=jumpToA, out=loadPC); // C-instruction and jump bits specify to load
    PC(in=ARegisterOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

}
